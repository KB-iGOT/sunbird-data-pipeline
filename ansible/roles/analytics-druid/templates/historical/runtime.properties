druid.service={{ druid_historical_service }}
druid.host={{ ansible_host }}
druid.port={{ druid_historical_port }}


# HTTP server threads
druid.server.http.numThreads={{ druid_configs[cluster].druid_historical_server_http_numThread }}

# Processing threads and buffers
druid.processing.buffer.sizeBytes={{ druid_configs[cluster].druid_historical_processing_bufferBytes }}
druid.historical.http.numConnections={{ druid_configs[cluster].druid_historical_http_numConnections }}
druid.processing.numThreads={{ druid_configs[cluster].druid_historical_processing_threads }}
druid.processing.numMergeBuffers={{ druid_configs[cluster].druid_historical_processing_num_merge_buffers }}

# Segmentstorage
#druid.segmentCache.locations=[{"path": "{{ druid_historical_segmentcache_path }}", "maxSize": {{ druid_configs[cluster].druid_historical_segmentcache_size }}}]

# Set the segment size to 9% of historical max size
{% set max_size = (druid_configs[cluster].druid_historical_server_maxsize * 0.09) | int %}

druid.segmentCache.locations=[{% for number in range(druid_configs[cluster].druid_historical_segmentcache_locations__count) %}{"path": "{{ druid_configs[cluster].druid_historical_segmentcache_path }}{{number }}", "maxSize": {{ max_size }}}{% if not loop.last %}, {% endif %}{% endfor %}]
druid.server.maxSize={{ druid_configs[cluster].druid_historical_server_maxsize }}

druid.segmentCache.numLoadingThreads={{ druid_configs[cluster].druid_historical_segmentcache_numloadingthreads }}

{% if druid_historical_monitoring_monitors is defined %}
# Monitors
druid.monitoring.monitors=[{{ druid_historical_monitoring_monitors }}]
{% endif %}

{% if druid_configs[cluster].druid_query_ondiskstorage_enabled %}
druid.query.groupBy.maxMergingDictionarySize={{ druid_configs[cluster].druid_historical_maxMergingDictionarySize }}
druid.query.groupBy.maxOnDiskStorage={{ druid_configs[cluster].druid_historical_maxOnDiskStorage }}
{% endif %}


# Caching
druid.historical.cache.useCache={{ druid_configs[cluster].druid_historical_enable_cache }}
druid.historical.cache.populateCache=true
druid.historical.cache.unCacheable=["select","scan"]
druid.cache.type=caffeine
druid.cache.sizeInBytes={{ druid_configs[cluster].druid_historical_cache_size }}
druid.cache.expireAfter={{ druid_configs[cluster].druid_historical_cache_expiry }}

